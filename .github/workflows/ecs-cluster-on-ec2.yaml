name: ECS Cluster on EC2 Apply

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      asg_desired_size:
        description: The desired instance count in ECS Cluster
        type: choice
        options:
          - 0
          - 1
          - 2
          - 3
        default: 1
        required: true
      environment:
        description: Environment to run against
        type: choice
        options:
          - prod
        default: prod
        required: true
      destroy:
        description: True to destroy
        required: true
        default: false
        type: boolean
      force:
        description: True to force apply
        required: true
        default: false
        type: boolean

run-name: Deploy to ${{ inputs.environment }} with instance = ${{ inputs.asg_desired_size }} and destroy = ${{ inputs.destroy }}

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  # Common Env Variables
  ROLE_TO_ASSUME: ${{ vars.ROLE_TO_ASSUME }}
  ROLE_SESSION_NAME: ${{ vars.ROLE_SESSION_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  STATE_BUCKET: ${{ vars.STATE_BUCKET }}
  NICKNAME: ecs-cluster-on-ec2
  TF_VERSION: 1.8.0
  # Inputs
  ENVIRONMENT: ${{ inputs.environment }}
  DESTROY: ${{ inputs.destroy }}
  # Project Specific Env Variables
  WORKING_DIRECTORY: ecs-cluster-on-ec2
  # Terraform Variables are prefixed with TF_VAR
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_asg_desired_size: ${{ inputs.asg_desired_size }}

jobs:
  plan-apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          # https://github.com/hashicorp/setup-terraform/issues/152
          terraform_wrapper: false
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init -reconfigure \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="region=$AWS_REGION" \
          -backend-config="key=$NICKNAME/$ENVIRONMENT/$AWS_REGION/terraform.tfstate"

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          set +e # allow the workflow to continue following steps even if the `terraform` execution failed
          if [ "$DESTROY" = "true" ]; then
            echo "This is a destroy plan"
            export options="-destroy"
          else
            export options=""
          fi

          terraform plan -detailed-exitcode $options -var-file $(pwd)/tf_$ENVIRONMENT.tfvars -out tfplan
          exitcode=$?
          echo exitcode = $exitcode

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi

      - name: Create String Output
        id: tf-plan-string
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "### Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        if: ${{ steps.tf-plan.outputs.exitcode == 2 }}
        id: tf-apply-string
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          TERRAFORM_OUTPUT=$(terraform apply -auto-approve tfplan -no-color)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "### Terraform Apply Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_OUTPUT" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Output to Task Summary
        if: ${{ steps.tf-plan.outputs.exitcode == 2 }}
        env:
          SUMMARY: ${{ steps.tf-apply-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
