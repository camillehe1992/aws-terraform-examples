name: Secret Manager Apply

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      environment:
        description: Environment to run against
        type: choice
        options:
          - prod
        default: prod
        required: true
      destroy:
        description: True to destroy
        required: true
        default: false
        type: boolean

run-name: Deploy to ${{ inputs.environment }} with destroy = ${{ inputs.destroy }}

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  # Common Env Variables
  ROLE_TO_ASSUME: ${{ vars.ROLE_TO_ASSUME }}
  ROLE_SESSION_NAME: ${{ vars.ROLE_SESSION_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  STATE_BUCKET: ${{ vars.STATE_BUCKET }}
  NICKNAME: secretmanager
  # Inputs
  ENVIRONMENT: ${{ inputs.environment }}
  DESTROY: ${{ inputs.destroy }}
  WORKING_DIRECTORY: secret-manager
  # Terraform Variables are prefixed with TF_VAR
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_database_password: ${{ secrets.TF_VAR_DATABASE_PASSWORD }}

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      exitcode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init -reconfigure \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="region=$AWS_REGION" \
          -backend-config="key=$NICKNAME/$ENVIRONMENT/$AWS_REGION/terraform.tfstate"

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          export exitcode=0
          if [ "$DESTROY" = "true" ]; then
            echo "This is a destroy plan"

            terraform plan -destroy -var-file $(pwd)/tf_$ENVIRONMENT.tfvars \
            -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          else
            terraform plan -var-file $(pwd)/tf_$ENVIRONMENT.tfvars \
            -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          fi

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi
      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.WORKING_DIRECTORY }}/tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "### Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  apply:
    needs: [plan]
    uses: camillehe1992/reusable-workflows/.github/workflows/terraform-apply-reusable.yaml@main
    secrets: inherit
    with:
      environment: ${{ inputs.environment }}
      nickname: secretmanager
      working-directory: secret-manager
