name: Secret Manager Test Apply

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      environment:
        description: Environment to run against
        type: choice
        options:
          - prod
        default: prod
        required: true
      destroy:
        description: True to destroy
        required: true
        default: false
        type: boolean
      tf-var-names:
        description: Terraform injected variables names, separated by comma
        type: string
        required: false
        default: database_url,aws_access_key_id,database_password

run-name: ${{ format('Deploy to {0} (destroy = {1})', inputs.environment, inputs.destroy) }}

permissions:
  contents: read
  pull-requests: write

env:
  # Common Env Variables
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ENVIRONMENT: ${{ inputs.environment }}
  NICKNAME: secretmanager
  STATE_BUCKET: ${{ vars.STATE_BUCKET }}
  TF_VERSION: 1.4.2
  WORKING_DIRECTORY: secret-manager
  # Terraform Variables are prefixed with TF_VAR
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_database_password: ${{ secrets.TF_VAR_DATABASE_PASSWORD }}

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Prepare Terraform Variables
        run: |
          export VAR_NAMES=${{ inputs.tf-var-names }}
          echo $VAR_NAMES

          for i in $(echo $VAR_NAMES | sed "s/,/ /g" | tr '[:lower:]' '[:upper:]')
          do
              export SECRET_NAME=TF_VAR_$i
              echo "-------- secret: $SECRET_NAME --------"
              SECRET_VALUE=${{ secrets[format('{0}', '$SECRET_NAME')] }}
              echo "SECRET_VALUE = $SECRET_VALUE"
          done
